name: Build root fs and zip

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}
  repository_dispatch:
    types: [iknite-release]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IKNITE_VERSION: 0.1.4

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./.github/actions/make-docker-action
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-rootfs:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - uses: actions/checkout@v2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Pull the docker image
        run: docker pull ${{ steps.meta.outputs.tags }}

    - name: git-get-release-action
      id: iknite_release
      uses: cardinalby/git-get-release-action@1.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        latest: true
        repo: kaweelze/iknite

      - name: Set the version from iknite build
        run: |
          echo IKNITE_VERSION=$(echo ${{ steps.iknite_release.outputs.tag_name }} | cut -c 2-) >> $GITHUB_ENV

      - name: Run Docker Image
        run: |
          /usr/bin/docker run \
            -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY \
            -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER \
            -e GITHUB_RETENTION_DAYS -e GITHUB_RUN_ATTEMPT -e GITHUB_ACTOR \
            -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF \
            -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL \
            -e GITHUB_GRAPHQL_URL -e GITHUB_REF_NAME -e GITHUB_REF_PROTECTED \
            -e GITHUB_REF_TYPE -e GITHUB_WORKSPACE -e GITHUB_ACTION \
            -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF \
            -e GITHUB_PATH -e GITHUB_ENV -e RUNNER_OS -e RUNNER_ARCH -e RUNNER_NAME \
            -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE \
            -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL \
            -e GITHUB_ACTIONS=true -e CI=true \
            -e IKNITE_VERSION \
            -v "/var/run/docker.sock":"/var/run/docker.sock" \
            -v "/home/runner/work/_temp/_github_home":"/github/home" \
            -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" \
            -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" \
            --cap-add SYS_ADMIN --cap-add NET_ADMIN --device /dev/fuse \
            --security-opt apparmor:unconfined --security-opt seccomp=unconfined \
            --workdir /github/workspace --rm -i \
            -v ${{ github.workspace }}:"/github/workspace" \
            ${{ steps.meta.outputs.tags }}

        # This can't be used as we have not enough privileges to cache the base images
        # - name: Build root fs
        #   uses: ./.github/actions/make-docker-action

      - name: Upload root fs artifact
        uses: actions/upload-artifact@v2
        with:
          name: rootfs.tar.gz
          path: "${{ github.workspace }}/build/rootfs.tar.gz"
      - name: Upload zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: kaweezle.zip
          path: "${{ github.workspace }}/build/kaweezle.zip"
      - name: Make Development release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            LICENSE
            build/rootfs.tar.gz
            build/rootfs.tar.gz.sha256
